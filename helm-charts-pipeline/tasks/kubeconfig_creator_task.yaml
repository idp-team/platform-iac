apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: 'Deployment, Kubernetes'
    tekton.dev/displayName: kubeconfig creator
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le'
    tekton.dev/tags: deploy
  name: kubeconfig-creator
spec:
  description: >-
    This Task do a similar job to the Cluster PipelineResource and are intended
    as its replacement.

    This task creates a kubeconfig file that can be used to configure access to
    the different clusters. A common use case for this task is to deploy your
    application/function on different clusters. The task will use the
    kubeconfigwriter image and the provided parameters to create a kubeconfig
    file that can be used by other tasks in the pipeline to access the target
    cluster.
  params:
    - default: ''
      description: name of the cluster
      name: name
      type: string
    - description: address of the cluster
      name: url
      type: string
    - default: ''
      description: username for basic authentication to the cluster
      name: username
      type: string
    - default: ''
      description: password for basic authentication to the cluster
      name: password
      type: string
    - default: ''
      description: contains PEM-encoded certificate authority certificates
      name: cadata
      type: string
    - default: ''
      description: contains PEM-encoded data from a client key file for TLS
      name: clientKeyData
      type: string
    - default: ''
      description: contains PEM-encoded data from a client cert file for TLS
      name: clientCertificateData
      type: string
    - default: ''
      description: default namespace to use on unspecified requests
      name: namespace
      type: string
    - default: ''
      description: bearer token for authentication to the cluster
      name: token
      type: string
    - default: 'true'
      description: >-
        to indicate server should be accessed without verifying the TLS
        certificate
      name: insecure
      type: string
  steps:
    - args:
        - '-clusterConfig'
        - >-
          { "name":"$(params.name)", "url":"$(params.url)",
          "username":"$(params.username)", "password":"$(params.password)",
          "cadata":"$(params.cadata)",
          "clientKeyData":"$(params.clientKeyData)",
          "clientCertificateData":"$(params.clientCertificateData)",
          "namespace":"$(params.namespace)", "token":"$(SA_TOKEN)",
          "Insecure":$(params.insecure) }
        - '-destinationDir'
        - $(workspaces.output.path)
      command:
        - /ko-app/kubeconfigwriter
      env:
        - name: SA_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: ct-helm-task
      image: >-
        gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/kubeconfigwriter@sha256:b2c6d0962cda88fb3095128b6202da9b0e6c9c0df3ef6cf7863505ffd25072fd
      name: write
      resources: {}
  workspaces:
    - name: output

